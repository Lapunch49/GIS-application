{
  "version": 3,
  "sources": ["../../ol/expr/expression.js"],
  "sourcesContent": ["/**\n * @module ol/expr/expression\n */\nimport {ascending} from '../array.js';\nimport {isStringColor} from '../color.js';\n\n/**\n * @fileoverview This module includes types and functions for parsing array encoded expressions.\n * The result of parsing an encoded expression is one of the specific expression classes.\n * During parsing, information is added to the parsing context about the data accessed by the\n * expression.\n */\n\n/**\n * Base type used for literal style parameters; can be a number literal or the output of an operator,\n * which in turns takes {@link import(\"./expression.js\").ExpressionValue} arguments.\n *\n * The following operators can be used:\n *\n * * Reading operators:\n *   * `['band', bandIndex, xOffset, yOffset]` For tile layers only. Fetches pixel values from band\n *     `bandIndex` of the source's data. The first `bandIndex` of the source data is `1`. Fetched values\n *     are in the 0..1 range. {@link import(\"../source/TileImage.js\").default} sources have 4 bands: red,\n *     green, blue and alpha. {@link import(\"../source/DataTile.js\").default} sources can have any number\n *     of bands, depending on the underlying data source and\n *     {@link import(\"../source/GeoTIFF.js\").Options configuration}. `xOffset` and `yOffset` are optional\n *     and allow specifying pixel offsets for x and y. This is used for sampling data from neighboring pixels (WebGL only).\n *   * `['get', 'attributeName', typeHint]` fetches a feature property value, similar to `feature.get('attributeName')`\n *     A type hint can optionally be specified, in case the resulting expression contains a type ambiguity which\n *     will make it invalid. Type hints can be one of: 'string', 'color', 'number', 'boolean', 'number[]'\n *   * `['geometry-type']` returns a feature's geometry type as string, either: 'LineString', 'Point' or 'Polygon'\n *     `Multi*` values are returned as their singular equivalent\n *     `Circle` geometries are returned as 'Polygon'\n *     `GeometryCollection` geometries are returned as the type of the first geometry found in the collection (WebGL only).\n *   * `['resolution']` returns the current resolution\n *   * `['time']` The time in seconds since the creation of the layer (WebGL only).\n *   * `['var', 'varName']` fetches a value from the style variables; will throw an error if that variable is undefined\n *   * `['zoom']` The current zoom level (WebGL only).\n *\n * * Math operators:\n *   * `['*', value1, value2, ...]` multiplies the values (either numbers or colors)\n *   * `['/', value1, value2]` divides `value1` by `value2`\n *   * `['+', value1, value2, ...]` adds the values\n *   * `['-', value1, value2]` subtracts `value2` from `value1`\n *   * `['clamp', value, low, high]` clamps `value` between `low` and `high`\n *   * `['%', value1, value2]` returns the result of `value1 % value2` (modulo)\n *   * `['^', value1, value2]` returns the value of `value1` raised to the `value2` power\n *   * `['abs', value1]` returns the absolute value of `value1`\n *   * `['floor', value1]` returns the nearest integer less than or equal to `value1`\n *   * `['round', value1]` returns the nearest integer to `value1`\n *   * `['ceil', value1]` returns the nearest integer greater than or equal to `value1`\n *   * `['sin', value1]` returns the sine of `value1`\n *   * `['cos', value1]` returns the cosine of `value1`\n *   * `['atan', value1, value2]` returns `atan2(value1, value2)`. If `value2` is not provided, returns `atan(value1)`\n *   * `['sqrt', value1]` returns the square root of `value1`\n *\n * * Transform operators:\n *   * `['case', condition1, output1, ...conditionN, outputN, fallback]` selects the first output whose corresponding\n *     condition evaluates to `true`. If no match is found, returns the `fallback` value.\n *     All conditions should be `boolean`, output and fallback can be any kind.\n *   * `['match', input, match1, output1, ...matchN, outputN, fallback]` compares the `input` value against all\n *     provided `matchX` values, returning the output associated with the first valid match. If no match is found,\n *     returns the `fallback` value.\n *     `input` and `matchX` values must all be of the same type, and can be `number` or `string`. `outputX` and\n *     `fallback` values must be of the same type, and can be of any kind.\n *   * `['interpolate', interpolation, input, stop1, output1, ...stopN, outputN]` returns a value by interpolating between\n *     pairs of inputs and outputs; `interpolation` can either be `['linear']` or `['exponential', base]` where `base` is\n *     the rate of increase from stop A to stop B (i.e. power to which the interpolation ratio is raised); a value\n *     of 1 is equivalent to `['linear']`.\n *     `input` and `stopX` values must all be of type `number`. `outputX` values can be `number` or `color` values.\n *     Note: `input` will be clamped between `stop1` and `stopN`, meaning that all output values will be comprised\n *     between `output1` and `outputN`.\n *   * `['coalesce', value1, value2, ...]` returns the first value in the list which is not null or undefined.\n *     An example would be to provide a default value for get: ['coalesce',['get','propertynanme'],'default value']]\n *\n * * Logical operators:\n *   * `['<', value1, value2]` returns `true` if `value1` is strictly lower than `value2`, or `false` otherwise.\n *   * `['<=', value1, value2]` returns `true` if `value1` is lower than or equals `value2`, or `false` otherwise.\n *   * `['>', value1, value2]` returns `true` if `value1` is strictly greater than `value2`, or `false` otherwise.\n *   * `['>=', value1, value2]` returns `true` if `value1` is greater than or equals `value2`, or `false` otherwise.\n *   * `['==', value1, value2]` returns `true` if `value1` equals `value2`, or `false` otherwise.\n *   * `['!=', value1, value2]` returns `true` if `value1` does not equal `value2`, or `false` otherwise.\n *   * `['!', value1]` returns `false` if `value1` is `true` or greater than `0`, or `true` otherwise.\n *   * `['all', value1, value2, ...]` returns `true` if all the inputs are `true`, `false` otherwise.\n *   * `['any', value1, value2, ...]` returns `true` if any of the inputs are `true`, `false` otherwise.\n *   * `['between', value1, value2, value3]` returns `true` if `value1` is contained between `value2` and `value3`\n *     (inclusively), or `false` otherwise.\n *   * `['in', needle, haystack]` returns `true` if `needle` is found in `haystack`, and\n *     `false` otherwise.\n *     This operator has the following limitations:\n *     * `haystack` has to be an array of numbers or strings (searching for a substring in a string is not supported yet)\n *     * Only literal arrays are supported as `haystack` for now; this means that `haystack` cannot be the result of an\n *     expression. If `haystack` is an array of strings, use the `literal` operator to disambiguate from an expression:\n *     `['literal', ['abc', 'def', 'ghi']]`\n *\n * * Conversion operators:\n *   * `['array', value1, ...valueN]` creates a numerical array from `number` values; please note that the amount of\n *     values can currently only be 2, 3 or 4 (WebGL only).\n *   * `['color', red, green, blue, alpha]` or `['color', shade, alpha]` creates a `color` value from `number` values;\n *     the `alpha` parameter is optional; if not specified, it will be set to 1 (WebGL only).\n *     Note: `red`, `green` and `blue` or `shade` components must be values between 0 and 255; `alpha` between 0 and 1.\n *   * `['palette', index, colors]` picks a `color` value from an array of colors using the given index; the `index`\n *     expression must evaluate to a number; the items in the `colors` array must be strings with hex colors\n *     (e.g. `'#86A136'`), colors using the rgba[a] functional notation (e.g. `'rgb(134, 161, 54)'` or `'rgba(134, 161, 54, 1)'`),\n *     named colors (e.g. `'red'`), or array literals with 3 ([r, g, b]) or 4 ([r, g, b, a]) values (with r, g, and b\n *     in the 0-255 range and a in the 0-1 range) (WebGL only).\n *   * `['to-string', value]` converts the input value to a string. If the input is a boolean, the result is \"true\" or \"false\".\n *     If the input is a number, it is converted to a string as specified by the \"NumberToString\" algorithm of the ECMAScript\n *     Language Specification. If the input is a color, it is converted to a string of the form \"rgba(r,g,b,a)\". (Canvas only)\n *\n * Values can either be literals or another operator, as they will be evaluated recursively.\n * Literal values can be of the following types:\n * * `boolean`\n * * `number`\n * * `number[]` (number arrays can only have a length of 2, 3 or 4)\n * * `string`\n * * {@link module:ol/color~Color}\n *\n * @typedef {Array<*>|import(\"../color.js\").Color|string|number|boolean} ExpressionValue\n * @api\n */\n\nlet numTypes = 0;\nexport const NoneType = 0;\nexport const BooleanType = 1 << numTypes++;\nexport const NumberType = 1 << numTypes++;\nexport const StringType = 1 << numTypes++;\nexport const ColorType = 1 << numTypes++;\nexport const NumberArrayType = 1 << numTypes++;\nexport const AnyType = Math.pow(2, numTypes) - 1;\n\nconst typeNames = {\n  [BooleanType]: 'boolean',\n  [NumberType]: 'number',\n  [StringType]: 'string',\n  [ColorType]: 'color',\n  [NumberArrayType]: 'number[]',\n};\n\nconst namedTypes = Object.keys(typeNames).map(Number).sort(ascending);\n\n/**\n * Get a string representation for a type.\n * @param {number} type The type.\n * @return {string} The type name.\n */\nexport function typeName(type) {\n  const names = [];\n  for (const namedType of namedTypes) {\n    if (includesType(type, namedType)) {\n      names.push(typeNames[namedType]);\n    }\n  }\n  if (names.length === 0) {\n    return 'untyped';\n  }\n  if (names.length < 3) {\n    return names.join(' or ');\n  }\n  return names.slice(0, -1).join(', ') + ', or ' + names[names.length - 1];\n}\n\n/**\n * @param {number} broad The broad type.\n * @param {number} specific The specific type.\n * @return {boolean} The broad type includes the specific type.\n */\nexport function includesType(broad, specific) {\n  return (broad & specific) === specific;\n}\n\n/**\n * @param {number} oneType One type.\n * @param {number} otherType Another type.\n * @return {boolean} The set of types overlap (share a common specific type)\n */\nexport function overlapsType(oneType, otherType) {\n  return !!(oneType & otherType);\n}\n\n/**\n * @param {number} type The type.\n * @param {number} expected The expected type.\n * @return {boolean} The given type is exactly the expected type.\n */\nexport function isType(type, expected) {\n  return type === expected;\n}\n\n/**\n * @typedef {boolean|number|string|Array<number>} LiteralValue\n */\n\nexport class LiteralExpression {\n  /**\n   * @param {number} type The value type.\n   * @param {LiteralValue} value The literal value.\n   */\n  constructor(type, value) {\n    this.type = type;\n    this.value = value;\n  }\n}\n\nexport class CallExpression {\n  /**\n   * @param {number} type The return type.\n   * @param {string} operator The operator.\n   * @param {...Expression} args The arguments.\n   */\n  constructor(type, operator, ...args) {\n    this.type = type;\n    this.operator = operator;\n    this.args = args;\n  }\n}\n\n/**\n * @typedef {LiteralExpression|CallExpression} Expression\n */\n\n/**\n * @typedef {Object} ParsingContext\n * @property {Set<string>} variables Variables referenced with the 'var' operator.\n * @property {Set<string>} properties Properties referenced with the 'get' operator.\n * @property {boolean} featureId The style uses the feature id.\n * @property {boolean} geometryType The style uses the feature geometry type.\n * @property {import(\"../style/flat.js\").FlatStyle|import(\"../style/webgl.js\").WebGLStyle} style The style being parsed\n */\n\n/**\n * @return {ParsingContext} A new parsing context.\n */\nexport function newParsingContext() {\n  return {\n    variables: new Set(),\n    properties: new Set(),\n    featureId: false,\n    geometryType: false,\n    style: {},\n  };\n}\n\n/**\n * @param {string} typeHint Type hint\n * @return {number} Resulting value type (will be a single type)\n */\nfunction getTypeFromHint(typeHint) {\n  switch (typeHint) {\n    case 'string':\n      return StringType;\n    case 'color':\n      return ColorType;\n    case 'number':\n      return NumberType;\n    case 'boolean':\n      return BooleanType;\n    case 'number[]':\n      return NumberArrayType;\n    default:\n      throw new Error(`Unrecognized type hint: ${typeHint}`);\n  }\n}\n\n/**\n * @typedef {LiteralValue|Array} EncodedExpression\n */\n\n/**\n * @param {EncodedExpression} encoded The encoded expression.\n * @param {ParsingContext} context The parsing context.\n * @param {number} [typeHint] Optional type hint\n * @return {Expression} The parsed expression result.\n */\nexport function parse(encoded, context, typeHint) {\n  switch (typeof encoded) {\n    case 'boolean': {\n      return new LiteralExpression(BooleanType, encoded);\n    }\n    case 'number': {\n      return new LiteralExpression(NumberType, encoded);\n    }\n    case 'string': {\n      let type = StringType;\n      if (isStringColor(encoded)) {\n        type |= ColorType;\n      }\n      // apply the given type hint only if it won't result in an empty type\n      if (!isType(type & typeHint, NoneType)) {\n        type &= typeHint;\n      }\n      return new LiteralExpression(type, encoded);\n    }\n    default: {\n      // pass\n    }\n  }\n\n  if (!Array.isArray(encoded)) {\n    throw new Error('Expression must be an array or a primitive value');\n  }\n\n  if (encoded.length === 0) {\n    throw new Error('Empty expression');\n  }\n\n  if (typeof encoded[0] === 'string') {\n    return parseCallExpression(encoded, context, typeHint);\n  }\n\n  for (const item of encoded) {\n    if (typeof item !== 'number') {\n      throw new Error('Expected an array of numbers');\n    }\n  }\n\n  let type = NumberArrayType;\n  if (encoded.length === 3 || encoded.length === 4) {\n    type |= ColorType;\n  }\n  if (typeHint) {\n    type &= typeHint;\n  }\n  return new LiteralExpression(type, encoded);\n}\n\n/**\n * @type {Object<string, string>}\n */\nexport const Ops = {\n  Get: 'get',\n  Var: 'var',\n  Concat: 'concat',\n  GeometryType: 'geometry-type',\n  Any: 'any',\n  All: 'all',\n  Not: '!',\n  Resolution: 'resolution',\n  Zoom: 'zoom',\n  Time: 'time',\n  Equal: '==',\n  NotEqual: '!=',\n  GreaterThan: '>',\n  GreaterThanOrEqualTo: '>=',\n  LessThan: '<',\n  LessThanOrEqualTo: '<=',\n  Multiply: '*',\n  Divide: '/',\n  Add: '+',\n  Subtract: '-',\n  Clamp: 'clamp',\n  Mod: '%',\n  Pow: '^',\n  Abs: 'abs',\n  Floor: 'floor',\n  Ceil: 'ceil',\n  Round: 'round',\n  Sin: 'sin',\n  Cos: 'cos',\n  Atan: 'atan',\n  Sqrt: 'sqrt',\n  Match: 'match',\n  Between: 'between',\n  Interpolate: 'interpolate',\n  Coalesce: 'coalesce',\n  Case: 'case',\n  In: 'in',\n  Number: 'number',\n  String: 'string',\n  Array: 'array',\n  Color: 'color',\n  Id: 'id',\n  Band: 'band',\n  Palette: 'palette',\n  ToString: 'to-string',\n};\n\n/**\n * @typedef {function(Array, ParsingContext, number):Expression} Parser\n * Third argument is a type hint\n */\n\n/**\n * @type {Object<string, Parser>}\n */\nconst parsers = {\n  [Ops.Get]: createParser(\n    ([_, typeHint]) => {\n      if (typeHint !== undefined) {\n        return getTypeFromHint(\n          /** @type {string} */ (\n            /** @type {LiteralExpression} */ (typeHint).value\n          ),\n        );\n      }\n      return AnyType;\n    },\n    withArgsCount(1, 2),\n    withGetArgs,\n  ),\n  [Ops.Var]: createParser(\n    ([firstArg]) => firstArg.type,\n    withArgsCount(1, 1),\n    withVarArgs,\n  ),\n  [Ops.Id]: createParser(NumberType | StringType, withNoArgs, usesFeatureId),\n  [Ops.Concat]: createParser(\n    StringType,\n    withArgsCount(2, Infinity),\n    parseArgsOfType(AnyType),\n  ),\n  [Ops.GeometryType]: createParser(StringType, withNoArgs, usesGeometryType),\n  [Ops.Resolution]: createParser(NumberType, withNoArgs),\n  [Ops.Zoom]: createParser(NumberType, withNoArgs),\n  [Ops.Time]: createParser(NumberType, withNoArgs),\n  [Ops.Any]: createParser(\n    BooleanType,\n    withArgsCount(2, Infinity),\n    parseArgsOfType(BooleanType),\n  ),\n  [Ops.All]: createParser(\n    BooleanType,\n    withArgsCount(2, Infinity),\n    parseArgsOfType(BooleanType),\n  ),\n  [Ops.Not]: createParser(\n    BooleanType,\n    withArgsCount(1, 1),\n    parseArgsOfType(BooleanType),\n  ),\n  [Ops.Equal]: createParser(\n    BooleanType,\n    withArgsCount(2, 2),\n    parseArgsOfType(AnyType),\n    narrowArgsType,\n  ),\n  [Ops.NotEqual]: createParser(\n    BooleanType,\n    withArgsCount(2, 2),\n    parseArgsOfType(AnyType),\n    narrowArgsType,\n  ),\n  [Ops.GreaterThan]: createParser(\n    BooleanType,\n    withArgsCount(2, 2),\n    parseArgsOfType(AnyType),\n    narrowArgsType,\n  ),\n  [Ops.GreaterThanOrEqualTo]: createParser(\n    BooleanType,\n    withArgsCount(2, 2),\n    parseArgsOfType(AnyType),\n    narrowArgsType,\n  ),\n  [Ops.LessThan]: createParser(\n    BooleanType,\n    withArgsCount(2, 2),\n    parseArgsOfType(AnyType),\n    narrowArgsType,\n  ),\n  [Ops.LessThanOrEqualTo]: createParser(\n    BooleanType,\n    withArgsCount(2, 2),\n    parseArgsOfType(AnyType),\n    narrowArgsType,\n  ),\n  [Ops.Multiply]: createParser(\n    (parsedArgs) => {\n      let outputType = NumberType | ColorType;\n      for (let i = 0; i < parsedArgs.length; i++) {\n        outputType &= parsedArgs[i].type;\n      }\n      return outputType;\n    },\n    withArgsCount(2, Infinity),\n    parseArgsOfType(NumberType | ColorType),\n    narrowArgsType,\n  ),\n  [Ops.Coalesce]: createParser(\n    (parsedArgs) => {\n      let type = AnyType;\n      for (let i = 1; i < parsedArgs.length; i += 2) {\n        type &= parsedArgs[i].type;\n      }\n      type &= parsedArgs[parsedArgs.length - 1].type;\n      return type;\n    },\n    withArgsCount(2, Infinity),\n    parseArgsOfType(AnyType),\n    narrowArgsType,\n  ),\n  [Ops.Divide]: createParser(\n    NumberType,\n    withArgsCount(2, 2),\n    parseArgsOfType(NumberType),\n  ),\n  [Ops.Add]: createParser(\n    NumberType,\n    withArgsCount(2, Infinity),\n    parseArgsOfType(NumberType),\n  ),\n  [Ops.Subtract]: createParser(\n    NumberType,\n    withArgsCount(2, 2),\n    parseArgsOfType(NumberType),\n  ),\n  [Ops.Clamp]: createParser(\n    NumberType,\n    withArgsCount(3, 3),\n    parseArgsOfType(NumberType),\n  ),\n  [Ops.Mod]: createParser(\n    NumberType,\n    withArgsCount(2, 2),\n    parseArgsOfType(NumberType),\n  ),\n  [Ops.Pow]: createParser(\n    NumberType,\n    withArgsCount(2, 2),\n    parseArgsOfType(NumberType),\n  ),\n  [Ops.Abs]: createParser(\n    NumberType,\n    withArgsCount(1, 1),\n    parseArgsOfType(NumberType),\n  ),\n  [Ops.Floor]: createParser(\n    NumberType,\n    withArgsCount(1, 1),\n    parseArgsOfType(NumberType),\n  ),\n  [Ops.Ceil]: createParser(\n    NumberType,\n    withArgsCount(1, 1),\n    parseArgsOfType(NumberType),\n  ),\n  [Ops.Round]: createParser(\n    NumberType,\n    withArgsCount(1, 1),\n    parseArgsOfType(NumberType),\n  ),\n  [Ops.Sin]: createParser(\n    NumberType,\n    withArgsCount(1, 1),\n    parseArgsOfType(NumberType),\n  ),\n  [Ops.Cos]: createParser(\n    NumberType,\n    withArgsCount(1, 1),\n    parseArgsOfType(NumberType),\n  ),\n  [Ops.Atan]: createParser(\n    NumberType,\n    withArgsCount(1, 2),\n    parseArgsOfType(NumberType),\n  ),\n  [Ops.Sqrt]: createParser(\n    NumberType,\n    withArgsCount(1, 1),\n    parseArgsOfType(NumberType),\n  ),\n  [Ops.Match]: createParser(\n    (parsedArgs) => {\n      let type = AnyType;\n      for (let i = 2; i < parsedArgs.length; i += 2) {\n        type &= parsedArgs[i].type;\n      }\n      type &= parsedArgs[parsedArgs.length - 1].type;\n      return type;\n    },\n    withArgsCount(4, Infinity),\n    withEvenArgs,\n    parseMatchArgs,\n  ),\n  [Ops.Between]: createParser(\n    BooleanType,\n    withArgsCount(3, 3),\n    parseArgsOfType(NumberType),\n  ),\n  [Ops.Interpolate]: createParser(\n    (parsedArgs) => {\n      let type = ColorType | NumberType;\n      for (let i = 3; i < parsedArgs.length; i += 2) {\n        type &= parsedArgs[i].type;\n      }\n      return type;\n    },\n    withArgsCount(6, Infinity),\n    withEvenArgs,\n    parseInterpolateArgs,\n  ),\n  [Ops.Case]: createParser(\n    (parsedArgs) => {\n      let type = AnyType;\n      for (let i = 1; i < parsedArgs.length; i += 2) {\n        type &= parsedArgs[i].type;\n      }\n      type &= parsedArgs[parsedArgs.length - 1].type;\n      return type;\n    },\n    withArgsCount(3, Infinity),\n    withOddArgs,\n    parseCaseArgs,\n  ),\n  [Ops.In]: createParser(BooleanType, withArgsCount(2, 2), parseInArgs),\n  [Ops.Number]: createParser(\n    NumberType,\n    withArgsCount(1, Infinity),\n    parseArgsOfType(AnyType),\n  ),\n  [Ops.String]: createParser(\n    StringType,\n    withArgsCount(1, Infinity),\n    parseArgsOfType(AnyType),\n  ),\n  [Ops.Array]: createParser(\n    (parsedArgs) => {\n      return parsedArgs.length === 3 || parsedArgs.length === 4\n        ? NumberArrayType | ColorType\n        : NumberArrayType;\n    },\n    withArgsCount(1, Infinity),\n    parseArgsOfType(NumberType),\n  ),\n  [Ops.Color]: createParser(\n    ColorType,\n    withArgsCount(1, 4),\n    parseArgsOfType(NumberType),\n  ),\n  [Ops.Band]: createParser(\n    NumberType,\n    withArgsCount(1, 3),\n    parseArgsOfType(NumberType),\n  ),\n  [Ops.Palette]: createParser(ColorType, withArgsCount(2, 2), parsePaletteArgs),\n  [Ops.ToString]: createParser(\n    StringType,\n    withArgsCount(1, 1),\n    parseArgsOfType(BooleanType | NumberType | StringType | ColorType),\n  ),\n};\n\n/**\n * @typedef {function(Array<EncodedExpression>, ParsingContext, Array<Expression>, number?):Array<Expression>|void} ArgValidator\n * An argument validator applies various checks to an encoded expression arguments\n * Returns the parsed arguments if any.\n * Third argument is the array of parsed arguments from previous validators\n * Fourth argument is an optional type hint\n */\n\n/**\n * @type ArgValidator\n */\nfunction withGetArgs(encoded, context) {\n  const arg = parse(encoded[1], context);\n  if (!(arg instanceof LiteralExpression)) {\n    throw new Error('Expected a literal argument for get operation');\n  }\n  if (typeof arg.value !== 'string') {\n    throw new Error('Expected a string argument for get operation');\n  }\n  context.properties.add(arg.value);\n  if (encoded.length === 3) {\n    const hint = parse(encoded[2], context);\n    return [arg, hint];\n  }\n  return [arg];\n}\n\n/**\n * @type ArgValidator\n */\nfunction withVarArgs(encoded, context, parsedArgs, typeHint) {\n  const varName = encoded[1];\n  if (typeof varName !== 'string') {\n    throw new Error('Expected a string argument for var operation');\n  }\n  context.variables.add(varName);\n  if (\n    !('variables' in context.style) ||\n    context.style.variables[varName] === undefined\n  ) {\n    return [new LiteralExpression(AnyType, varName)];\n  }\n  const initialValue = context.style.variables[varName];\n  const arg = /** @type {LiteralExpression} */ (parse(initialValue, context));\n  arg.value = varName;\n  if (typeHint && !overlapsType(typeHint, arg.type)) {\n    throw new Error(\n      `The variable ${varName} has type ${typeName(\n        arg.type,\n      )} but the following type was expected: ${typeName(typeHint)}`,\n    );\n  }\n  return [arg];\n}\n\n/**\n * @type ArgValidator\n */\nfunction usesFeatureId(encoded, context) {\n  context.featureId = true;\n}\n\n/**\n * @type ArgValidator\n */\nfunction usesGeometryType(encoded, context) {\n  context.geometryType = true;\n}\n\n/**\n * @type ArgValidator\n */\nfunction withNoArgs(encoded, context) {\n  const operation = encoded[0];\n  if (encoded.length !== 1) {\n    throw new Error(`Expected no arguments for ${operation} operation`);\n  }\n  return [];\n}\n\n/**\n * @param {number} minArgs The minimum number of arguments.\n * @param {number} maxArgs The maximum number of arguments.\n * @return {ArgValidator} The argument validator\n */\nfunction withArgsCount(minArgs, maxArgs) {\n  return function (encoded, context) {\n    const operation = encoded[0];\n    const argCount = encoded.length - 1;\n    if (minArgs === maxArgs) {\n      if (argCount !== minArgs) {\n        const plural = minArgs === 1 ? '' : 's';\n        throw new Error(\n          `Expected ${minArgs} argument${plural} for ${operation}, got ${argCount}`,\n        );\n      }\n    } else if (argCount < minArgs || argCount > maxArgs) {\n      const range =\n        maxArgs === Infinity\n          ? `${minArgs} or more`\n          : `${minArgs} to ${maxArgs}`;\n      throw new Error(\n        `Expected ${range} arguments for ${operation}, got ${argCount}`,\n      );\n    }\n  };\n}\n\n/**\n * @param {number} argType The argument type.\n * @return {ArgValidator} The argument validator\n */\nfunction parseArgsOfType(argType) {\n  return function (encoded, context) {\n    const operation = encoded[0];\n    const argCount = encoded.length - 1;\n    /**\n     * @type {Array<Expression>}\n     */\n    const args = new Array(argCount);\n    for (let i = 0; i < argCount; ++i) {\n      const expression = parse(encoded[i + 1], context);\n      if (!overlapsType(argType, expression.type)) {\n        const gotType = typeName(argType);\n        const expectedType = typeName(expression.type);\n        throw new Error(\n          `Unexpected type for argument ${i} of ${operation} operation` +\n            `, got ${gotType} but expected ${expectedType}`,\n        );\n      }\n      expression.type &= argType;\n      args[i] = expression;\n    }\n    return args;\n  };\n}\n\n/**\n * @type {ArgValidator}\n */\nfunction narrowArgsType(encoded, context, parsedArgs) {\n  const operation = encoded[0];\n  const argCount = encoded.length - 1;\n\n  // first pass to determine a narrowed down type\n  let sameType = AnyType;\n  for (let i = 0; i < parsedArgs.length; ++i) {\n    sameType &= parsedArgs[i].type;\n  }\n\n  if (sameType === NoneType) {\n    throw new Error(\n      `No common type could be found for arguments of ${operation} operation`,\n    );\n  }\n\n  // re-parse args\n  const args = new Array(argCount);\n  for (let i = 0; i < argCount; ++i) {\n    args[i] = parse(encoded[i + 1], context, sameType);\n  }\n  return args;\n}\n\n/**\n * @type {ArgValidator}\n */\nfunction withOddArgs(encoded, context) {\n  const operation = encoded[0];\n  const argCount = encoded.length - 1;\n  if (argCount % 2 === 0) {\n    throw new Error(\n      `An odd amount of arguments was expected for operation ${operation}, got ${JSON.stringify(\n        argCount,\n      )} instead`,\n    );\n  }\n}\n\n/**\n * @type {ArgValidator}\n */\nfunction withEvenArgs(encoded, context) {\n  const operation = encoded[0];\n  const argCount = encoded.length - 1;\n  if (argCount % 2 === 1) {\n    throw new Error(\n      `An even amount of arguments was expected for operation ${operation}, got ${JSON.stringify(\n        argCount,\n      )} instead`,\n    );\n  }\n}\n\n/**\n * @type ArgValidator\n */\nfunction parseMatchArgs(encoded, context, parsedArgs, typeHint) {\n  const argsCount = encoded.length - 1;\n\n  const input = parse(encoded[1], context);\n  let inputType = input.type;\n  const fallback = parse(encoded[encoded.length - 1], context);\n  let outputType =\n    typeHint !== undefined ? typeHint & fallback.type : fallback.type;\n\n  // first parse args to figure out possible types\n  const args = new Array(argsCount - 2);\n  for (let i = 0; i < argsCount - 2; i += 2) {\n    const match = parse(encoded[i + 2], context);\n    const output = parse(encoded[i + 3], context);\n    inputType &= match.type;\n    outputType &= output.type;\n    args[i] = match;\n    args[i + 1] = output;\n  }\n\n  // check input and output types validity\n  const expectedInputType = StringType | NumberType | BooleanType;\n  if (!overlapsType(expectedInputType, inputType)) {\n    throw new Error(\n      `Expected an input of type ${typeName(\n        expectedInputType,\n      )} for the interpolate operation` +\n        `, got ${typeName(inputType)} instead`,\n    );\n  }\n  if (isType(outputType, NoneType)) {\n    throw new Error(\n      `Could not find a common output type for the following match operation: ` +\n        JSON.stringify(encoded),\n    );\n  }\n\n  // parse again inputs and outputs with common type\n  for (let i = 0; i < argsCount - 2; i += 2) {\n    const match = parse(encoded[i + 2], context, inputType);\n    const output = parse(encoded[i + 3], context, outputType);\n    args[i] = match;\n    args[i + 1] = output;\n  }\n\n  return [\n    parse(encoded[1], context, inputType),\n    ...args,\n    parse(encoded[encoded.length - 1], context, outputType),\n  ];\n}\n\n/**\n * @type ArgValidator\n */\nfunction parseInterpolateArgs(encoded, context, parsedArgs, typeHint) {\n  const interpolationType = encoded[1];\n  let interpolation;\n  switch (interpolationType[0]) {\n    case 'linear':\n      interpolation = 1;\n      break;\n    case 'exponential':\n      interpolation = interpolationType[1];\n      if (typeof interpolation !== 'number') {\n        throw new Error(\n          `Expected a number base for exponential interpolation` +\n            `, got ${JSON.stringify(interpolation)} instead`,\n        );\n      }\n      break;\n    default:\n      interpolation = null;\n  }\n  if (!interpolation) {\n    throw new Error(\n      `Invalid interpolation type: ${JSON.stringify(interpolationType)}`,\n    );\n  }\n  interpolation = parse(interpolation, context);\n\n  // check input types\n  let input = parse(encoded[2], context);\n  if (!overlapsType(NumberType, input.type)) {\n    throw new Error(\n      `Expected an input of type number for the interpolate operation` +\n        `, got ${typeName(input.type)} instead`,\n    );\n  }\n  input = parse(encoded[2], context, NumberType); // parse again with narrower output\n\n  const args = new Array(encoded.length - 3);\n  for (let i = 0; i < args.length; i += 2) {\n    let stop = parse(encoded[i + 3], context);\n    if (!overlapsType(NumberType, stop.type)) {\n      throw new Error(\n        `Expected all stop input values in the interpolate operation to be of type number` +\n          `, got ${typeName(stop.type)} at position ${i + 2} instead`,\n      );\n    }\n    let output = parse(encoded[i + 4], context);\n    if (!overlapsType(NumberType | ColorType, output.type)) {\n      throw new Error(\n        `Expected all stop output values in the interpolate operation to be a number or color` +\n          `, got ${typeName(output.type)} at position ${i + 3} instead`,\n      );\n    }\n    // parse again with narrower types\n    stop = parse(encoded[i + 3], context, NumberType);\n    output = parse(encoded[i + 4], context, NumberType | ColorType);\n    args[i] = stop;\n    args[i + 1] = output;\n  }\n\n  return [interpolation, input, ...args];\n}\n\n/**\n * @type ArgValidator\n */\nfunction parseCaseArgs(encoded, context, parsedArgs, typeHint) {\n  const fallback = parse(encoded[encoded.length - 1], context);\n  let outputType =\n    typeHint !== undefined ? typeHint & fallback.type : fallback.type;\n\n  // first parse args to figure out possible types\n  const args = new Array(encoded.length - 1);\n  for (let i = 0; i < args.length - 1; i += 2) {\n    const condition = parse(encoded[i + 1], context);\n    const output = parse(encoded[i + 2], context);\n    if (!overlapsType(BooleanType, condition.type)) {\n      throw new Error(\n        `Expected all conditions in the case operation to be of type boolean` +\n          `, got ${typeName(condition.type)} at position ${i} instead`,\n      );\n    }\n    outputType &= output.type;\n    args[i] = condition;\n    args[i + 1] = output;\n  }\n\n  if (isType(outputType, NoneType)) {\n    throw new Error(\n      `Could not find a common output type for the following case operation: ` +\n        JSON.stringify(encoded),\n    );\n  }\n\n  // parse again args with common output type\n  for (let i = 0; i < args.length - 1; i += 2) {\n    args[i + 1] = parse(encoded[i + 2], context, outputType);\n  }\n  args[args.length - 1] = parse(\n    encoded[encoded.length - 1],\n    context,\n    outputType,\n  );\n\n  return args;\n}\n\n/**\n * @type ArgValidator\n */\nfunction parseInArgs(encoded, context) {\n  /** @type {Array<number|string>} */\n  let haystack = /** @type {any} */ (encoded[2]);\n  if (!Array.isArray(haystack)) {\n    throw new Error(\n      `The \"in\" operator was provided a literal value which was not an array as second argument.`,\n    );\n  }\n  if (typeof haystack[0] === 'string') {\n    if (haystack[0] !== 'literal') {\n      throw new Error(\n        `For the \"in\" operator, a string array should be wrapped in a \"literal\" operator to disambiguate from expressions.`,\n      );\n    }\n    if (!Array.isArray(haystack[1])) {\n      throw new Error(\n        `The \"in\" operator was provided a literal value which was not an array as second argument.`,\n      );\n    }\n    haystack = haystack[1];\n  }\n\n  let needleType = StringType | NumberType;\n  const args = new Array(haystack.length);\n  for (let i = 0; i < args.length; i++) {\n    const arg = parse(haystack[i], context);\n    needleType &= arg.type;\n    args[i] = arg;\n  }\n  if (isType(needleType, NoneType)) {\n    throw new Error(\n      `Could not find a common type for the following in operation: ` +\n        JSON.stringify(encoded),\n    );\n  }\n\n  const needle = parse(encoded[1], context, needleType);\n  return [needle, ...args];\n}\n\n/**\n * @type ArgValidator\n */\nfunction parsePaletteArgs(encoded, context) {\n  const index = parse(encoded[1], context, NumberType);\n  if (index.type !== NumberType) {\n    throw new Error(\n      `The first argument of palette must be an number, got ${typeName(\n        index.type,\n      )} instead`,\n    );\n  }\n  const colors = encoded[2];\n  if (!Array.isArray(colors)) {\n    throw new Error('The second argument of palette must be an array');\n  }\n  const parsedColors = new Array(colors.length);\n  for (let i = 0; i < parsedColors.length; i++) {\n    const color = parse(colors[i], context, ColorType);\n    if (!(color instanceof LiteralExpression)) {\n      throw new Error(\n        `The palette color at index ${i} must be a literal value`,\n      );\n    }\n    if (!overlapsType(color.type, ColorType)) {\n      throw new Error(\n        `The palette color at index ${i} should be of type color, got ${typeName(\n          color.type,\n        )} instead`,\n      );\n    }\n    parsedColors[i] = color;\n  }\n  return [index, ...parsedColors];\n}\n\n/**\n * @param {number|function(Array<Expression>):number} returnType The return type of the operator; can be a fixed value or a callback taking the parsed\n * arguments\n * @param {Array<ArgValidator>} argValidators A chain of argument validators; the return value of the last validator\n * will be used as parsed arguments\n * @return {Parser} The parser.\n */\nfunction createParser(returnType, ...argValidators) {\n  return function (encoded, context, typeHint) {\n    const operator = encoded[0];\n    let parsedArgs = [];\n    for (let i = 0; i < argValidators.length; i++) {\n      parsedArgs =\n        argValidators[i](encoded, context, parsedArgs, typeHint) || parsedArgs;\n    }\n    let actualType =\n      typeof returnType === 'function' ? returnType(parsedArgs) : returnType;\n    if (typeHint !== undefined) {\n      if (!overlapsType(actualType, typeHint)) {\n        throw new Error(\n          `The following expression was expected to return ${typeName(\n            typeHint,\n          )}, but returns ${typeName(actualType)} instead: ${JSON.stringify(\n            encoded,\n          )}`,\n        );\n      }\n      actualType &= typeHint;\n    }\n    if (actualType === NoneType) {\n      throw new Error(\n        `No matching type was found for the following expression: ${JSON.stringify(\n          encoded,\n        )}`,\n      );\n    }\n    return new CallExpression(actualType, operator, ...parsedArgs);\n  };\n}\n\n/**\n * @param {Array} encoded The encoded expression.\n * @param {ParsingContext} context The parsing context.\n * @param {number} [typeHint] Optional type hint\n * @return {Expression} The parsed expression.\n */\nfunction parseCallExpression(encoded, context, typeHint) {\n  const operator = encoded[0];\n\n  const parser = parsers[operator];\n  if (!parser) {\n    throw new Error(`Unknown operator: ${operator}`);\n  }\n  return parser(encoded, context, typeHint);\n}\n\n/**\n * Returns a simplified geometry type suited for the `geometry-type` operator\n * @param {import('../geom/Geometry.js').default|import('../render/Feature.js').default} geometry Geometry object\n * @return {'Point'|'LineString'|'Polygon'|''} Simplified geometry type; empty string of no geometry found\n */\nexport function computeGeometryType(geometry) {\n  if (!geometry) {\n    return '';\n  }\n  const type = geometry.getType();\n  switch (type) {\n    case 'Point':\n    case 'LineString':\n    case 'Polygon':\n      return type;\n    case 'MultiPoint':\n    case 'MultiLineString':\n    case 'MultiPolygon':\n      return /** @type {'Point'|'LineString'|'Polygon'} */ (type.substring(5));\n    case 'Circle':\n      return 'Polygon';\n    case 'GeometryCollection':\n      return computeGeometryType(\n        /** @type {import(\"../geom/GeometryCollection.js\").default} */ (\n          geometry\n        ).getGeometries()[0],\n      );\n    default:\n      return '';\n  }\n}\n"],
  "mappings": "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",
  "names": ["type"]
}
